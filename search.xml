<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pytorch_GPU环境搭建</title>
      <link href="/2023/03/20/pytorch-GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/03/20/pytorch-GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="总括"><a href="#总括" class="headerlink" title="总括"></a>总括</h2><p><em><strong>总体过程是通过设备管理器查看显卡型号，去<a href="https://www.nvidia.cn/geforce/drivers/">NVIDIA GeForce 驱动程序 - N 卡驱动 | NVIDIA</a>下载相应显卡驱动，<code>nvidia-smi</code>查看CUDA最高可安装版本，安装对应CUDA和CUDNN(下文有网址)，一般会再安装Anaconda用于环境管理（记得安装时勾选添加环境变量），创建pytorch环境（注意python版本），激活环境在其中安装相应的torch版本，最后验证是否成功</strong></em></p><h2 id="官网安装"><a href="#官网安装" class="headerlink" title="官网安装"></a>官网安装</h2><p>直接去<a href="https://pytorch.org/get-started/previous-versions/">pytorch官网</a><code>previous Pytorch Versions</code>里面已经标注好<code>pytorch</code>以及对应的<code>cuda</code>版本，最新版本首页就是。</p><img src="/2023/03/20/pytorch-GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%AE%98%E7%BD%91.png" class=""><h2 id="更换国内源-x3D-x3D-一定要删掉defaults-x3D-x3D"><a href="#更换国内源-x3D-x3D-一定要删掉defaults-x3D-x3D" class="headerlink" title="更换国内源 &#x3D;&#x3D;一定要删掉defaults&#x3D;&#x3D;"></a>更换国内源 &#x3D;&#x3D;一定要删掉defaults&#x3D;&#x3D;</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">windows下：</span><br><span class="line"></span><br><span class="line">清华源</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge </span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line"></span><br><span class="line"># 设置搜索时显示通道地址</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line">pytorch配置</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line"></span><br><span class="line">中科大源</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</span><br><span class="line">conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/</span><br><span class="line">conda config --set show_channel_urls yes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">linux下：</span><br><span class="line">将以上配置文件写在~/.condarc中</span><br><span class="line">vim ~/.condarc</span><br><span class="line"></span><br><span class="line">channels:</span><br><span class="line">  - https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CUDA与CUDnn安装全过程（多版本）"><a href="#CUDA与CUDnn安装全过程（多版本）" class="headerlink" title="CUDA与CUDnn安装全过程（多版本）"></a>CUDA与CUDnn安装全过程（多版本）</h2><p>CUDA安装链接：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>多版本安装时需注意，如果安装的版本比之前的都要高（比如电脑已经有了10.2，现在要装11.3），那么就需要勾选安装全部，反之只需要勾选安装CUDA的那个选项就好。</p><p>安装过程一共涉及到两次安装路径的选择，第一次选择默认（这样不用自己手动添加环境变量，似乎更改后系统仍会自行改回），第二次可以任意更改为自己方便的路径。</p><p>CUDnn安装链接：<a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p><p>这里面有<code>bin</code> <code>include</code> <code>lib</code>三个文件夹，将对应的文件里的内容复制到你第二次填写安装路径，对应的文件就好。（比如我第二次选择CUDA的安装路径是F:\CUDA10.2,那么我就需要将CUDnn里的<code>bin</code>等文件复制到F:\CUDA10.2\bin中）</p><p>&#x3D;&#x3D;检测安装是否成功&#x3D;&#x3D;</p><img src="/2023/03/20/pytorch-GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" class=""><p>&#x3D;&#x3D;不同版本CUDA的切换&#x3D;&#x3D; </p><p>只需要更改环境变量中PATH的上下位置，所需CUDA版本的位置在上，则系统就会调用该版本，就实现了版本的切换。</p><img src="/2023/03/20/pytorch-GPU%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E5%88%87%E6%8D%A2.png" class=""><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##验证是否成功</span><br><span class="line">import torch</span><br><span class="line">print(torch.__version__)                  #torch版本</span><br><span class="line">print(torch.cuda.is_available())          #cuda是否有用</span><br><span class="line">print(torch.backends.cudnn.is_available())#cudnn是否有用</span><br><span class="line">print(torch.cuda_version)                 #当前cuda版本</span><br><span class="line">print(torch.backends.cudnn.version())     #当前cudnn版本</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUDA与CUDnn安装全过程（多版本）</title>
      <link href="/2023/03/02/CUDA%E4%B8%8ECUDnn%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E5%A4%9A%E7%89%88%E6%9C%AC%EF%BC%89/"/>
      <url>/2023/03/02/CUDA%E4%B8%8ECUDnn%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E5%A4%9A%E7%89%88%E6%9C%AC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="CUDA与CUDnn基本介绍"><a href="#CUDA与CUDnn基本介绍" class="headerlink" title="CUDA与CUDnn基本介绍"></a>CUDA与CUDnn基本介绍</h2><h3 id="什么是CUDA"><a href="#什么是CUDA" class="headerlink" title="什么是CUDA"></a>什么是CUDA</h3><p>CUDA(ComputeUnified Device Architecture)，是显卡厂商NVIDIA推出的运算平台。 CUDA是一种由NVIDIA推出的通用并行计算架构，该架构使GPU能够解决复杂的计算问题。</p><h3 id="什么是CUDNN"><a href="#什么是CUDNN" class="headerlink" title="什么是CUDNN"></a>什么是CUDNN</h3><p>NVIDIA cuDNN是用于深度神经网络的GPU加速库。它强调性能、易用性和低内存开销。NVIDIA cuDNN可以集成到更高级别的机器学习框架中，如谷歌的Tensorflow、加州大学伯克利分校的流行caffe软件。简单的插入式设计可以让开发人员专注于设计和实现神经网络模型，而不是简单调整性能，同时还可以在GPU上实现高性能现代并行计算。</p><h3 id="CUDA与CUDNN的关系"><a href="#CUDA与CUDNN的关系" class="headerlink" title="CUDA与CUDNN的关系"></a>CUDA与CUDNN的关系</h3><p>CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。</p><h2 id="CUDA与CUDnn安装全过程（多版本）"><a href="#CUDA与CUDnn安装全过程（多版本）" class="headerlink" title="CUDA与CUDnn安装全过程（多版本）"></a>CUDA与CUDnn安装全过程（多版本）</h2><p>CUDA安装链接：<a href="https://developer.nvidia.com/cuda-toolkit-archive">https://developer.nvidia.com/cuda-toolkit-archive</a></p><p>多版本安装时需注意，如果安装的版本比之前的都要高（比如电脑已经有了10.2，现在要装11.3），那么就需要勾选安装全部，反之只需要勾选安装CUDA的那个选项就好。</p><p>安装过程一共涉及到两次安装路径的选择，第一次选择默认（这样不用自己手动添加环境变量，似乎更改后系统仍会自行改回），第二次可以任意更改为自己方便的路径。</p><p>CUDnn安装链接：<a href="https://developer.nvidia.com/rdp/cudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a></p><p>这里面有<code>bin</code> <code>include</code> <code>lib</code>三个文件夹，将对应的文件里的内容复制到你第二次填写安装路径，对应的文件就好。（比如我第二次选择CUDA的安装路径是F:\CUDA10.2,那么我就需要将CUDnn里的<code>bin</code>等文件复制到F:\CUDA10.2\bin中）</p><p>检测安装是否成功：</p><img src="/2023/03/02/CUDA%E4%B8%8ECUDnn%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E5%A4%9A%E7%89%88%E6%9C%AC%EF%BC%89/%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" class=""><p>不同版本CUDA的切换：</p><p>只需要更改环境变量中PATH的上下位置，所需CUDA版本的位置在上，则系统就会调用该版本，就实现了版本的切换。</p><img src="/2023/03/02/CUDA%E4%B8%8ECUDnn%E5%AE%89%E8%A3%85%E5%85%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E5%A4%9A%E7%89%88%E6%9C%AC%EF%BC%89/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2.png" class="">]]></content>
      
      
      <categories>
          
          <category> NVIDIA </category>
          
          <category> 通用并行计算架构 </category>
          
          <category> 深度神经网络的GPU加速库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA&amp;CUDnn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《人工智能现代方法》读书笔记</title>
      <link href="/2023/02/27/%E3%80%8A%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/02/27/%E3%80%8A%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%8E%B0%E4%BB%A3%E6%96%B9%E6%B3%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>人工智能价值大，一万亿美元；影响大，李开复等众人公认；机会多，未来拥有无限可能。</p><p>什么是人工智能？书中有四种方法：</p><ol><li><p>类人类行为（图灵测试）：可以理解为，模仿人体器官运行机制，’嘴巴‘、’大脑‘、’眼睛与耳朵‘、’四肢‘（后两者与前者合称为“完全图灵测试”）</p></li><li><p>类人类思考（基于人类心理行为学研究）：研究的突破口在于利用人类心理与行为的精确对应，使之程序化，从而达到类人类的目的。</p></li><li><p>理性行为（逻辑与概率）：将人类行为分为确定事件和不确定事件，逻辑以处理确定事件，概率以处理不确定事件。</p></li><li><p>理性思考（感知、理解、预测并做出正确的行为）：智能体，标准模型；主流研究方向。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《人工智能现代方法》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>报错总汇1</title>
      <link href="/2023/02/26/%E6%8A%A5%E9%94%99%E6%80%BB%E6%B1%871/"/>
      <url>/2023/02/26/%E6%8A%A5%E9%94%99%E6%80%BB%E6%B1%871/</url>
      
        <content type="html"><![CDATA[<h2 id="fatal-Could-not-read-from-remote-repository"><a href="#fatal-Could-not-read-from-remote-repository" class="headerlink" title="fatal: Could not read from remote repository"></a>fatal: Could not read from remote repository</h2><p>问题描述：我在使用命令<code>hexo d -g</code>，通过git上传博客时，发生了标题错误。</p><p>原因分析：没有通过ssh验证，主要原因为长时间未使用，验证代理关闭。</p><p>解决办法：在git bash输入&#x3D;&#x3D;添加&#x3D;&#x3D;<code>ssh-add id_rsa文件路径</code>（路径正斜杠）&#x3D;&#x3D;启动&#x3D;&#x3D;<code>eval ssh-agent -s</code> ，再输入密钥密码完成验证，即可解决报错。</p><img src="/2023/02/26/%E6%8A%A5%E9%94%99%E6%80%BB%E6%B1%871/ssh.png" class=""><img src="/2023/02/26/%E6%8A%A5%E9%94%99%E6%80%BB%E6%B1%871/ssh-agent.png" class=""><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">##自用</span><br><span class="line">eval &quot;$(ssh-agent)&quot;#正确输出后就可以尝试连接</span><br><span class="line">ssh-add C:/Users/Hetmyer/.ssh/id_rsa</span><br><span class="line">大部分网络问题，建议多次尝试</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://stackoverflow.com/questions/13509293/git-fatal-could-not-read-from-remote-repository">https://stackoverflow.com/questions/13509293/git-fatal-could-not-read-from-remote-repository</a></p>]]></content>
      
      
      <categories>
          
          <category> 报错总汇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo_butterfly博客使用补充</title>
      <link href="/2023/02/26/hexo-butterfly%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E8%A1%A5%E5%85%85/"/>
      <url>/2023/02/26/hexo-butterfly%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h2 id="博客知识补充"><a href="#博客知识补充" class="headerlink" title="博客知识补充"></a>博客知识补充</h2><h3 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h3><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img 示例.png 示例 %&#125; #后一个示例可以不用写</span><br></pre></td></tr></table></figure><p>博客必须写在生成的.md文件中</p><h3 id="新博客生成基本设置"><a href="#新博客生成基本设置" class="headerlink" title="新博客生成基本设置"></a>新博客生成基本设置</h3><p>博文生成设置：</p><img src="/2023/02/26/hexo-butterfly%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E8%A1%A5%E5%85%85/%E5%8D%9A%E6%96%87%E7%94%9F%E6%88%90%E8%AE%BE%E7%BD%AE.png" class=""><p>新博文头部内容设置：</p><img src="/2023/02/26/hexo-butterfly%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8%E8%A1%A5%E5%85%85/%E4%BF%AE%E6%94%B9%E6%96%B0%E5%8D%9A%E5%AE%A2%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE.png" class=""><p>参考网址：<a href="https://blog.csdn.net/zyq55917/article/details/125003333">https://blog.csdn.net/zyq55917/article/details/125003333</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI绘图工具搭建与基本使用</title>
      <link href="/2023/02/26/AI%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/02/26/AI%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p><strong>Stable Diffusion web UI</strong>是基于 Gradio 库的 Stable Diffusion 浏览器界面。</p><p>项目地址：<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui">https://github.com/AUTOMATIC1111/stable-diffusion-webui</a></p><h2 id="环境配置及注意事项"><a href="#环境配置及注意事项" class="headerlink" title="环境配置及注意事项"></a>环境配置及注意事项</h2><h3 id="readme-md官方安装方式如下"><a href="#readme-md官方安装方式如下" class="headerlink" title="readme.md官方安装方式如下"></a>readme.md官方安装方式如下</h3><h4 id="在-Windows-上自动安装"><a href="#在-Windows-上自动安装" class="headerlink" title="在 Windows 上自动安装"></a>在 Windows 上自动安装</h4><ol><li>安装<a href="https://www.python.org/downloads/windows/">Python 3.10.6</a>，勾选“Add Python to PATH”</li><li>安装<a href="https://git-scm.com/download/win">Git</a>。</li><li>下载 stable-diffusion-webui 存储库，例如通过运行<code>git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</code>.</li><li><code>webui-user.bat</code>以普通非管理员用户身份从 Windows 资源管理器运行。</li></ol><h4 id="在-Linux-上自动安装"><a href="#在-Linux-上自动安装" class="headerlink" title="在 Linux 上自动安装"></a>在 Linux 上自动安装</h4><ol><li>安装依赖项：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Debian-based:</span><br><span class="line">sudo apt install wget git python3 python3-venv</span><br><span class="line"># Red Hat-based:</span><br><span class="line">sudo dnf install wget git python3</span><br><span class="line"># Arch-based:</span><br><span class="line">sudo pacman -S wget git python3</span><br></pre></td></tr></table></figure><ol><li>要在 中安装<code>/home/$(whoami)/stable-diffusion-webui/</code>，请运行：</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(wget -qO- https://raw.githubusercontent.com/AUTOMATIC1111/stable-diffusion-webui/master/webui.sh)</span><br></pre></td></tr></table></figure><ol><li>运行<code>webui.sh</code>。</li></ol><p>以上即为官方提供的安装方式，对于有类似安装经验的小伙伴，看到这些已经足够。但是对于“新手”朋友而言，可能在安装过程中就会有很多疑问、遇到各种问题。为了能够一起玩耍共同感受AI魅力，下面我将会以windows系统为例，较为详细地操作一遍，希望能帮到这些朋友。</p><h3 id="较为详细的安装步骤"><a href="#较为详细的安装步骤" class="headerlink" title="较为详细的安装步骤"></a>较为详细的安装步骤</h3><p>我在安装的过程中，尝试过利用已有的Anaconda环境来达到节约储存空间的目的。在过程中，虽然可以使用不是3.10.6版本的python进入到下一步的配置过程，但是提示也说明了，非3.10.6版本的可能不能正常运行。起初，我忽略提示继续安装，然而后续它在我已有torch的情况下，仍然要重新下载torch-1.13.1+cu117。看到这里有些小伙伴可能会想到修改其安装源码来达到我们使用现有环境的目的。不过，我从现实角度出发，这个不过是一个AI工具，我们没必要为了一点储存空间而浪费宝贵的时间，因此我就没有作进一步的探索，而是老老实实地让它自动安装相应版本。以下是我的安装配置过程：</p><p>首先是安装3.10.6版本的python。安装网址：<a href="https://www.python.org/downloads/release/python-3106/">https://www.python.org/downloads/release/python-3106/</a></p><p>这里有两点注意：</p><ol><li>&#x3D;&#x3D;不要下载最新版本的python&#x3D;&#x3D;，因为在后续执行<code>webui-user.bat</code>文件时需要安装可调用GPU的torch，版本为torch-1.13.1+cu117。如果你安装了最新版python，会与该版本的torch发生冲突就无法安装成功。</li><li>在安装python时（双击.exe文件后看到的第一个画面），一定要勾选将python路径添加到环境变量中，不然之后运行<code>webui-user.bat</code>将可能出现无法launch python。如果实在忘了的小伙伴也可以在安装完成后，自己手动添加。方法是先找到你安装python的路径，在路径后加上python.exe，复制，打开设置&gt;系统&gt;系统信息&gt;高级系统设置&gt;环境变量&gt;找到系统变量左侧的Path，选中，再点击新建&gt;将之前复制的路径粘贴进去，然后一路点确定。</li></ol><p>安装后，我们需要按住win+R键，输入cmd打开终端，在输入python或者py，如果出现了python版本信息则证明安装成功。</p><p>其次，我们安装Git。安装网址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a> </p><p>选择自己电脑对应的版本，下载，安装。这里应该没啥问题，就和一般应用程序安装一样。安装好后，我们切换到自己要存放项目的文件夹，鼠标右击，点击<code>Git Bash Here</code>进入Git终端，随后输入：git clone <a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui.git">https://github.com/AUTOMATIC1111/stable-diffusion-webui.git</a></p><p>等待克隆完毕。</p><p>最后，我们进入刚刚克隆好的文件，找到<code>wedui-user.bat</code>文件，直接双击运行，它将会自动安装相应的库和文件配置。如果出现了类似“SSLError”问题，你只需要，根据提示“按任意键继续”，退出终端，重新运行<code>wedui-user.bat</code>文件,这一步多是网络问题，需要科学上网并记得设置为全局模式，多尝试几次。或者，根据报错提示，自行下载相应的库、模型。</p><h4 id="“no-xformers”问题解决"><a href="#“no-xformers”问题解决" class="headerlink" title="“no xformers”问题解决"></a>“no xformers”问题解决</h4><p>用编辑器打开<code>webui-user.bat</code>文件，添加如下指令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMANDLINE_ARGS=--medvram --reinstall-xformers --xformers</span><br></pre></td></tr></table></figure><p>这条指令就是让我们，再次尝试下载xformers还有相应的模型。如果，还没有解决，我们还是需要多试几次，这主要是网络问题。直到出现本地网址，则说明成功。接下来你可以按住ctrl键，鼠标点击出现的网址，就可以看到AI绘图工具的可视化操作界面了！</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>Web UI界面如图：</p><img src="/2023/02/26/AI%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%95%8C%E9%9D%A2%E4%BB%8B%E7%BB%8D.png" class="" title="界面介绍"><p>规定在前：✔后数字代表相应功能区，接下来我将会分区介绍。</p><h3 id="基本介绍和使用流程"><a href="#基本介绍和使用流程" class="headerlink" title="基本介绍和使用流程"></a>基本介绍和使用流程</h3><p>首先是在1区选择你下载好的Check Point模型，再到2区填写需要生成图片的文字描述，在4区填写消极的文字描述（可以理解为AI对3区文字描述可能产生误解的部分），再到5区选择生成图片的样式，6区的阈值与5区对应（大则表示“更像”），8区是图片大小，10区是图片数目，9区调节的是图片与文字描述的吻合度（数值越大越符合），11区是种子数（-1代表随机，点一下绿色图标表示固定种子数，这一般用于在同一张图片进行修改），12区是图片生成、中断开关，13区是图片呈现区。</p><h3 id="extra-networks"><a href="#extra-networks" class="headerlink" title="extra networks"></a>extra networks</h3><img src="/2023/02/26/AI%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/extra_networks.png" class=""><p>点击图示图标即可看到，extra networks区，这里可以使你的图片呈现更多种风格的样式。这里就需要小伙伴自己探索啦。</p><h3 id="prompt生成技巧"><a href="#prompt生成技巧" class="headerlink" title="prompt生成技巧"></a>prompt生成技巧</h3><p>这里可以借助ChatGPT，来帮组生成。效果如图：</p><img src="/2023/02/26/AI%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/chatgpt2pic.png" class=""><p>“咒语”：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面的prompt是用来指导AI绘画模型创作图像的。它们包含了图像的各种细节，如人物的外观、背景、颜色和光线效果，以及图像的主题和风格。这些prompt的格式经常包含括号内的加权数字，用于指定某些细节的重要性或强调。例如，&quot;(masterpiece:1.5)&quot;表示作品质量是非常重要的，多个括号也有类似作用。此外，如果使用中括号，如&quot;&#123;blue hair:white hair:0.3&#125;&quot;，这代表将蓝发和白发加以融合，蓝发占比为0.3。</span><br><span class="line">以下是用prompt帮助AI模型生成图像的例子：masterpiece,(bestquality),highlydetailed,ultra-detailed,  cold , solo , ( 1girl ) , detailedeyes , shinegoldeneyes ) ( longliverhair ) expressionless , ( long sleeves , puffy sleeves ) ,  ( white wings ) , shinehalo , ( heavymetal : 1 . 2 ) , ( metaljewelry ) ,  cross-lacedfootwear ( chain ) ,  ( Whitedoves : 1 . 2 ) </span><br><span class="line">可以选择的prompt包括：</span><br><span class="line"></span><br><span class="line">颜色</span><br><span class="line">    light（明）</span><br><span class="line">    dark（暗）</span><br><span class="line">    pale（薄）</span><br><span class="line">    deep（濃）</span><br><span class="line">天气 时间</span><br><span class="line">    golden hour lighting  （阳光照明）</span><br><span class="line">    strong rim light      （强边缘光照）</span><br><span class="line">    intense shadows  （强烈的阴影）</span><br><span class="line">    in the rain            （雨）</span><br><span class="line">    rainy days              （雨）</span><br><span class="line">    sunset                  （日落）</span><br><span class="line">    cloudy                   （多云）</span><br><span class="line">建筑物</span><br><span class="line">    in the baroque architecture     （巴洛克建筑 文艺复兴时期意大利的一种装修风格，外形自由，追求动感，喜好富丽）</span><br><span class="line">    in the romanesque architecture streets        （罗马式街道）</span><br><span class="line">    in the palace                                 （宫廷）</span><br><span class="line">    at the castle（城的外观为背景）</span><br><span class="line">    in the castle（城的内部为背景）</span><br><span class="line">    in the street                                   （在街上）</span><br><span class="line">    in the cyberpunk city                       （在赛博朋克城市里）</span><br><span class="line">    rainy night in a cyberpunk city with glowing neon lights  （在雨天的赛博朋克城市，还有霓虹灯）</span><br><span class="line">    at the lighthouse                               （在灯塔周围）</span><br><span class="line">    in misty onsen                                 （温泉）</span><br><span class="line">    by the moon                                     （月亮边上）</span><br><span class="line">    in a bar, in bars                                   （酒吧）</span><br><span class="line">    in a tavern                                        （居酒屋）</span><br><span class="line">    Japanese arch                                  （鳥居）</span><br><span class="line">    in a locker room                                 （在上锁的房间里）</span><br><span class="line">山</span><br><span class="line">    on a hill（山上）</span><br><span class="line">    the top of the hill（山顶）</span><br><span class="line">海</span><br><span class="line">    on the beach       （海滩上）</span><br><span class="line">    over the sea           （海边上）</span><br><span class="line">    beautiful purple sunset at beach  （海边的美丽日落）</span><br><span class="line">    in the ocean           （海中）</span><br><span class="line">    on the ocean          （船上）</span><br><span class="line">仿照例子，并不局限于我给你的单词，给出一套详细描述“从国际空间站，看壮观的、灯火璀璨的地球夜景”的prompt，注意：masterpiece,(bestquality),highlydetailed,ultra-detailed</span><br><span class="line">必须放在前面，直接开始给出prompt不需要用自然语言描述</span><br></pre></td></tr></table></figure><h2 id="参考资料与补充"><a href="#参考资料与补充" class="headerlink" title="参考资料与补充"></a>参考资料与补充</h2><p>模型下载网址:<a href="https://civitai.com/">https://civitai.com/</a></p><img src="/2023/02/26/AI%E7%BB%98%E5%9B%BE%E5%B7%A5%E5%85%B7%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%AF%B9%E5%BA%94%E5%AD%98%E6%94%BE%E7%9B%AE%E5%BD%95.png" class="">]]></content>
      
      
      <categories>
          
          <category> github项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stable_diffusion_webui </tag>
            
            <tag> AI绘画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网那些事儿</title>
      <link href="/2023/02/26/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2023/02/26/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="V2rayN简介"><a href="#V2rayN简介" class="headerlink" title="V2rayN简介"></a>V2rayN简介</h2><p>V2rayN客户端是一个基于V2ray 内核的windows客户端，它目前支持Xray内核，然后也可以手动更新核心和客户端的版本。下载即用，数据可视化（能看到你访问的网址）、上手也简单。</p><p>下载地址：<a href="https://github.com/2dust/v2rayN/releases/">https://github.com/2dust/v2rayN/releases/</a></p><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><h3 id="启动V2rayN"><a href="#启动V2rayN" class="headerlink" title="启动V2rayN"></a>启动V2rayN</h3><p>下载解压安装后，双击运行V2rayN.exe</p><img src="/2023/02/26/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/V2rayN.exe%E8%BF%90%E8%A1%8C.png" class="" title="V2rayN.exe运行"><p>若没有弹出主界面，可以通过点击任务栏“反V”中的V2rayN图标，跳出主界面。如图示：</p><img src="/2023/02/26/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/V2rayN%E5%9B%BE%E6%A0%87.png" class=""><h3 id="三种导入节点的方式"><a href="#三种导入节点的方式" class="headerlink" title="三种导入节点的方式"></a>三种导入节点的方式</h3><ol><li>复制节点，点击一下主界面，ctrl + V粘贴</li><li>点击订阅设置，添加名字和url，并启用。</li><li>如果是二维码，我们就需要右击任务栏“反V”中的V2rayN图标，你就可以看到“扫描屏幕中的二维码”，完成导入</li></ol><h3 id="运行节点"><a href="#运行节点" class="headerlink" title="运行节点"></a>运行节点</h3><p>直接选中你想要的节点，再回车。</p><h3 id="其他细节"><a href="#其他细节" class="headerlink" title="其他细节"></a>其他细节</h3><p>其他类似设置全局、自动配置系统代理，你可以在下面找到。</p><img src="/2023/02/26/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86.png" class="" title="系统代理"><p>如果是新手，只是想简单使用，直接选中“自动配置系统代理”，然后运行节点即可。</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>ctrl + A 全选</p><p>ctrl + R 测连接速度延迟(ms)</p><p>ctrl + T 测下载速度（MB&#x2F;s）</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V2ray </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo_github_butterfly 博客搭建</title>
      <link href="/2023/02/03/hexo-github-butterfly-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/02/03/hexo-github-butterfly-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>1.Node.js<br>因为Hexo是一个基于Node.js的静态博客框架，因此需要先安装Node.js环境，<code>node.js</code>多版本下载地址：<a href="https://nodejs.org/en/download/releases/">https://nodejs.org/en/download/releases/</a></p><p>2.Git<br>此处为Windows平台下的下载地址：<a href="https://git-scm.com/download/win">Git</a><br>或者可以选择直接下载:<a href="https://desktop.github.com/">GitHub Desktop</a><br>Mac及其他操作系统请参考Hexo官方提供的下载链接。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>建议win用户在Git Bash中执行命令<br>由于安装Hexo要用到npm，但是有时候速度很慢，如果速度过慢我们可以使用淘宝镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>安装淘宝源之后只需要npm换成cnpm就行了。如<code>$ cnpm install hexo-cli -g</code><br>当然，如果你使用npm速度可以的话，那么安装淘宝源这一步你可以忽略</p><p>完成以上环境配置之后，通过下面的命令安装Hexo</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>当出现<code>Start blogging with Hexo !</code>表示Hexo安装成功</p><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><p>安装完成之后，选择一个目录作为建站所需文件的存放路径，如我选择G:\workspace\myblog，执行以下命令完成hexo的初始化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init G:\workspace\myblog</span><br></pre></td></tr></table></figure><p>然后命令行进入该目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd G:\workspace\myblog</span><br></pre></td></tr></table></figure><p>执行下面的命令，系统会可以根据package.json文件中dependencies的配置安装所有依赖包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成之后，根目录文件夹下各个目录的含义，可以参考Hexo官网的解释：<a href="https://hexo.io/zh-cn/docs/setup.html">目录信息</a></p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>在建站工具的根目录（如上G:\workspace\myblog）下通过以下命令启动服务器，之后访问网址 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到我们刚刚建立的博客，Hexo会默认生成一个Hello World的博文</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>hexo s是hexo server的简写，效果是一样的。这样我们就已经可以在本地浏览我们自己的博客了。以后每次对博客进行修改，都可以先通过这种方式进行本地的预览，满意之后再部署到GitHub Pages上</p><h2 id="部署到GitHub-ssh部分"><a href="#部署到GitHub-ssh部分" class="headerlink" title="部署到GitHub(ssh部分)"></a>部署到GitHub(ssh部分)</h2><p>&#x3D;&#x3D;可以直接使用<code>Gitkraken</code>应用程序完成搭建和部署&#x3D;&#x3D;，下载地址：<a href="https://www.gitkraken.com/">https://www.gitkraken.com/</a></p><p>基本使用教程推荐：<a href="https://www.youtube.com/watch?v=q4CQBuZ4IGo">https://www.youtube.com/watch?v=q4CQBuZ4IGo</a></p><p>如下是手动配置：</p><ul><li>首先在你的GitHub上新建一个Repository，仓库名的固定写法为 your_user_name.github.io<br>Repository新建完成之后，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages 。点击Automatic page generator，Github将会自动替你创建出一个gh-pages</li><li>配置SSH-Key：参考官网资料<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">概括步骤</span><br><span class="line">打开git bash</span><br><span class="line"></span><br><span class="line">##生成ssh密钥</span><br><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;（若不支持ed25519则：ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br><span class="line">上述命令输入后，会经历确认密钥文件保存地址、输入密钥、再次输入密码</span><br><span class="line"></span><br><span class="line">##将ssh密钥添加到ssh-agent</span><br><span class="line">1.确保ssh-agent运行</span><br><span class="line">输入和返回类似于</span><br><span class="line">$ eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">&gt; Agent pid 59566</span><br><span class="line">2.将ssh密钥添加到ssh-agen</span><br><span class="line">ssh-add ~/.ssh/yourname</span><br><span class="line">3.将.pub文件内容加入github&gt;setting&gt;ssh&gt;new ssh&gt;add</span><br><span class="line"></span><br><span class="line">##为硬件安全密钥生成新的ssh密钥</span><br><span class="line">生成密钥、将.pub文件内容加入github&gt;setting&gt;ssh&gt;new ssh&gt;add</span><br></pre></td></tr></table></figure><ul><li>修改根目录的网站配置文件_config.yml，搜索deploy字段，修改成如下所示的格式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:EurekaCheng/EurekaCheng.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>其中，repo是我们刚刚建立的远程仓库，换成你自己的id，同时因为刚才配置了SSH-Key，所以必须是SSH形式的URL&#x3D;&#x3D;值得注意的是&#x3D;&#x3D;每一个后面都必须有一个空格，否则会引起错误</p><ul><li>安装Git包，执行以下命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>部署到GitHub上，执行以下的命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>hexo d是hexo deploy的简写，你也可以执行后者，效果是一样的。有时候如果部署不成功的话可以试试<code>hexo d -g</code>命令。或者可以用先<code>hexo g</code>后<code>hexo d</code>的命令组合。以后每次在本地编辑完成之后直接使用<code>hexo d</code>或者<code>hexo d -g</code>就可以部署到Github了</p><p>现在我们可以通过访问<code> https://yourname.github.io/</code>来访问我们自己的博客了！至此，我们的博客已经基本建立完成，下面要说说怎么使用。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Hexo常用命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span><br><span class="line">hexo server (hexo s) 启动本地web服务，用于博客的预览</span><br><span class="line">hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）</span><br></pre></td></tr></table></figure><p>先说说hexo命令常用简写和常用组合</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo n == hexo new</span><br><span class="line">$ hexo g == hexo generate</span><br><span class="line">$ hexo s == hexo server</span><br><span class="line">$ hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>常用组合</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo d -g #生成部署</span><br><span class="line">$ hexo s -g #生成预览</span><br></pre></td></tr></table></figure><p>新建一篇博文可通过以下的命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;</span><br></pre></td></tr></table></figure><p>其中name为博文的名字，建立完成之后，可以在.&#x2F;source&#x2F;_posts文件夹下发现我们刚刚建立name.md文件。使用你熟悉的编辑器打开，便可以进行博文的撰写。博文支持MarkDown语法的编写，下面是一个示例文件的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: name</span><br><span class="line">date: 2016-04-06 10:34:21</span><br><span class="line">tags:</span><br><span class="line">- 日志</span><br><span class="line">categories:</span><br><span class="line">- 日志</span><br><span class="line">---</span><br><span class="line">博文内容</span><br></pre></td></tr></table></figure><p>博文写好之后，在每次发布之前，我们要先将写好的博客生成静态文件，执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>之后生成的文件会放在.&#x2F;public目录下，这便是我们将要部署到GitHub上的全部内容</p><p>静态文件生成之后，便可以部署到GitHub</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>再重新打开我们的博客 网址已经可以看到刚刚新加入的博文.</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>Hexo提供了丰富的主题可供我们选择和使用.&#x2F;themes目录下存放主题。刚才默认生成的博客用的就是默认的主题landscape。这里有在GitHub上Hexo所有的主题，可以访问<a href="https://github.com/hexojs/hexo/wiki/Themes">https://github.com/hexojs/hexo/wiki/Themes</a></p><ol><li>安装主题的命令</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone &lt;repository&gt; themes/&lt;theme-name&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>打开 _config.yml文件，修改theme关键字段，改为刚才下载的 theme-name.我自己用的主题是Butterfly,如果你想使用butterfly主题请参考以下步骤</li></ol><h2 id="Butterfly主题配置"><a href="#Butterfly主题配置" class="headerlink" title="Butterfly主题配置"></a>Butterfly主题配置</h2><p>首先cd到博客根目录，然后执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/jerryc127/hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>然后修改配置文件<br>修改站点配置文件_config.yml，找到以下部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">## Themes: http://hexo.io/themes/</span><br><span class="line">theme: landscape</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: Butterfly</span><br></pre></td></tr></table></figure><p>至此，Butterfly主题就安装好了，非常方便，在Hexo中切换主题只需修改站点配置文件中theme属性来配置，想换就换。<br>进一步地美化Butterfly博客请参考链接：<a href="https://www.little-demon.cn/archives/16/">https://www.little-demon.cn/archives/16/</a></p><p>以上基本就完成了博客的搭建和配置，感谢你的阅读，希望对你自己博客的创建有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> ssh </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
